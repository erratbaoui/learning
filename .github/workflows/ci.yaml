name: Java CI/CD with Docker and GHCR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ Set up Java environment
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # ✅ Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # ✅ Build the project
      - name: Build with Maven
        run: mvn -B clean package --file pom.xml

      # ✅ Run unit tests
      - name: Run tests
        run: mvn test --file pom.xml

      # ✅ Upload build artifact for deploy stage
      - name: Upload build artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: success()

    steps:
      # ✅ Checkout code again for Docker context
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ Download artifact from build job
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      # ✅ Set up Docker environment
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # ✅ Verify JAR exists
      - name: Verify JAR file
        run: ls -lh target/

      # ✅ Build Docker image (using your Dockerfile)
      - name: Build Docker image
        run: docker build -t myapp:staging -f docker/Dockerfile .

      # ✅ Run container locally for health check
      - name: Run container for testing
        run: |
          docker run -d --name staging -p 8080:8080 myapp:staging
          docker ps

      # ✅ Show logs (optional debugging)
      - name: Show container logs
        run: docker logs staging || true

      # ✅ Health check (basic)
      - name: Verify container is healthy
        run: |
          sleep 5
          if ! curl -s http://localhost:8080/actuator/health | grep -q "UP"; then
            echo "Container health check failed"
            docker logs staging
            exit 1
          fi

      # ✅ Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # ✅ Tag image for GHCR
      - name: Tag Docker image for GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ secrets.GHCR_USERNAME }}/myapp:staging
          docker tag myapp:staging $IMAGE_NAME

      # ✅ Push image to GHCR
      - name: Push Docker image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ secrets.GHCR_USERNAME }}/myapp:staging
          docker push $IMAGE_NAME